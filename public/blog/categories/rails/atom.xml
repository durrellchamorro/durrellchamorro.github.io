<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | I'm Durrell Chamorro]]></title>
  <link href="http://durrellchamorro.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://durrellchamorro.github.io/"/>
  <updated>2016-01-31T19:05:26-08:00</updated>
  <id>http://durrellchamorro.github.io/</id>
  <author>
    <name><![CDATA[Durrell Chamorro]]></name>
    <email><![CDATA[durrell.chamorro@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Generate Slugs]]></title>
    <link href="http://durrellchamorro.github.io/blog/2015/10/13/how-to-generate-slugs/"/>
    <updated>2015-10-13T20:06:52-07:00</updated>
    <id>http://durrellchamorro.github.io/blog/2015/10/13/how-to-generate-slugs</id>
    <content type="html"><![CDATA[<p>Slugs make pretty URLs. Pretty URLs help optimize your app for search engines and they
hide sensitive database information. In this post, I&rsquo;ll explain, line by line, one approach
to generating slugs. <!--more--></p>

<p>Here is the code I will explain. You might find it helpful to read this post in one window
while another window shows the module below in its entirety. That way as you read about
a line of code you can see that code in context in the other window. You can copy
the code below into a <code>sluggable.rb</code> file for your own project or include it as a gem by putting
<code>gem 'sluggable_durrell'</code> in your Gemfile.</p>

<pre><code class="ruby">module Sluggable
  extend ActiveSupport::Concern

  included do
    before_save :generate_slug
    class_attribute :slug_column
  end

  def to_param
    slug
  end

  def generate_slug
    the_slug = to_slug(self.send(self.class.slug_column))
    object = self.class.find_by(slug: the_slug)
    count = 2
    while object &amp;&amp; object != self
      the_slug = append_suffix(the_slug, count)
      object = self.class.find_by(slug: the_slug)
      count += 1
    end
    self.slug = the_slug
  end

  def append_suffix(the_slug, count)
    if the_slug.split('-').last.to_i != 0
      the_slug.split('-').slice(0...-1).join('-') + "-" + count.to_s
    else
      the_slug + "-" + count.to_s
    end
  end

  def to_slug(name)
    name.parameterize.gsub("_", "").downcase
  end

  module ClassMethods
    def sluggable_column(column_name)
      self.slug_column = column_name
    end
  end
end
</code></pre>

<pre><code>extend ActiveSupport::Concern
</code></pre>

<p>To make a long story short, this line lets the methods
in the <code>Sluggable</code> module become instance methods of the class that includes the <code>Sluggable</code> module. It
also looks for a module named <code>ClassMethods</code> and includes the methods inside the <code>ClassMethods</code> module as
class methods of the class that includes the Sluggable module. Click <a href="http://www.fakingfantastic.com/2010/09/20/concerning-yourself-with-active-support-concern/">here</a>
for a more in depth explanation of how <code>ActiveSupport::Concern</code> works.</p>

<pre><code class="ruby">included do
  before_save :generate_slug
  class_attribute :slug_column
end
</code></pre>

<p>This fires the code inside the do block when the module is included in the class.
The <code>before_save</code> method tells the class to call <code>generate_slug</code> on each instance of the class
before the instance is saved. The <code>class_attribute</code> method adds an attribute named <code>slug_column</code> to the
class.</p>

<p>Let&rsquo;s say you have a Categories controller with a <code>show</code> action like this:</p>

<pre><code class="ruby">def show
  @category = Category.find(params[:id])
end
</code></pre>

<p>Let&rsquo;s say you have a corresponding view, <code>/views/categories/show.html.erb</code> and you have the line: <code>resources :categories</code>
in your <code>routes.rb</code> file which gives you a <code>category_path</code>
helper such that you can link to this show page like so:
<code>erb
&lt;%= link_to @category.name, category_path(@category) %&gt;
</code>
or if you prefer the shorter way:
<code>erb
&lt;%= link_to @category.name, @category %&gt;
</code></p>

<p>If you hover over the link with your mouse in Chrome, you will see the URL
that link points to in the bottom left hand corner of your browser. In this case
the development URL might look something like this:
<code>http://localhost:3000/categories/1</code>. This is what we would expect since if you go to
<code>http://localhost:3000/rails/info/routes</code> you will see the path for the <code>category_path</code> helper
is <code>/categories/:id(.:format)</code>.</p>

<p>The 1 at the end of the URL in the example above is the <code>:id</code> or in other words the
primary key for that particular category. How does the link know to point to the correct <code>:id</code> if
all it is given is the <code>@category</code> object? The trick is behind the scenes rails calls <code>to_param</code> on
<code>@category</code> and <code>to_param</code> returns the primary key in a string as shown below in the rails console.</p>

<pre><code class="bash">category = Category.first
category.to_param
 =&gt; "1"
</code></pre>

<p>With that being said I can now explain why the <code>to_param</code> method is overridden in the Sluggable module:</p>

<pre><code class="ruby">def to_param
  slug
end
</code></pre>

<p>Instead of returning the primary key of the category, we want to return the slug so the URL
will read like this instead <code>http://localhost:3000/categories/programming</code>. If you put a
<code>binding.pry</code> in the show action like so:</p>

<pre><code class="bash">   19: def show
=&gt; 20:   binding.pry
   21:   @category = Category.find(params[:id])
   22: end

[1] pry(#&lt;CategoriesController&gt;)&gt; params
=&gt; {"action"=&gt;"show", "controller"=&gt;"categories", "id"=&gt;"programming"}
</code></pre>

<p>you can see that the <code>:id</code> is now equal to the slug value instead of the primary key which is what we&rsquo;d
expect since we overrode the <code>to_param</code> method to return the slug instead of the primary key. In this example,
I already generated the slug for this category which is why it returned &ldquo;programming&rdquo;. Now I can explain how to
generate the slug.</p>

<pre><code class="ruby">def generate_slug
  the_slug = to_slug(self.send(self.class.slug_column))
...
</code></pre>

<p><code>self.class</code> returns the class of <code>self</code> so in our example <code>self.class.slug_column</code>
is the same as <code>Category.slug_column</code>. The reason we can call <code>slug_column</code> on the Category
class is because as I explained in the beginning, ActiveSupport::Concern looks for a module named ClassMethods
and includes all the methods inside that module as class methods of the class that includes the Sluggable module. In
our example the Category class/model looks something like this:</p>

<pre><code class="ruby">class Category &lt; ActiveRecord::Base
  include Sluggable
  sluggable_column :name
end
</code></pre>

<p>As you can see, the <code>name</code> column from the categories table is being sent to the <code>sluggable_column</code> method as a
symbol.</p>

<pre><code class="ruby">module ClassMethods
  def sluggable_column(column_name)
    self.slug_column = column_name
  end
end
</code></pre>

<p>The <code>sluggable_column</code> method takes <code>:name</code> and sets the <code>slug_column</code> attribute equal to <code>:name</code>.
Therefore, <code>self.class.slug_column</code> is equal to <code>:name</code> as demonstrated in the rails console:</p>

<pre><code class="bash">category = Category.first
category.class.slug_column
=&gt; :name
</code></pre>

<p> Now we can read:</p>

<pre><code class="ruby">the_slug = to_slug(self.send(self.class.slug_column))
</code></pre>

<p>as:</p>

<pre><code class="ruby">the_slug = to_slug(self.send(:name)
</code></pre>

<p><code>self.send(:name)</code> is the same as <code>self.name</code> so we can just read this as:</p>

<pre><code class="ruby">the slug = to_slug(self.name)
</code></pre>

<p>Now I can explain what the <code>to_slug</code> method does.</p>

<pre><code class="ruby">def to_slug(name)
  name.parameterize.gsub("_", "").downcase
end
</code></pre>

<p><code>self.name</code>returns a string and the <code>parameterize</code> method is being called on that string. The
<code>parameterize</code> method replaces special characters in a string so that it may be used as part of a ‘pretty’ URL.
The <code>parameterize</code> method doesn&rsquo;t replace the underscore character so <code>gsub</code> is called on the string to remove any underscore and then
downcase is called on it to remove all uppercase characters. This way we&rsquo;ll have a string that can be used in a URL.</p>

<pre><code class="ruby">def generate_slug
  the_slug = to_slug(self.send(self.class.slug_column))
  #in our ongoing example, the line above becomes: the_slug = "programming"
  #in our ongoing example, the line below becomes:
  #object = Category.find_by(slug: "programming")
  object = self.class.find_by(slug: the_slug)
...
end
</code></pre>

<p>In this case <code>object</code> will equal <code>nil</code> because we haven&rsquo;t saved the new category to the database yet and we are assuming
I didn&rsquo;t already save a category named &ldquo;programming&rdquo;. Since <code>object</code>
is nil, the while loop will be skipped. This line:</p>

<pre><code class="ruby">self.slug = the_slug
</code></pre>

<p>sets the slug column equal to &ldquo;programming&rdquo;. Since we called
<code>before_save :generate_slug</code> the slug will be generated in the create action when
<code>@category = Category.new(category_params)</code> is called. Then the slug will be saved to the database with the <code>@category</code> instance
when the create action calls <code>@category.save</code>.</p>

<p>Let&rsquo;s say there is already a &ldquo;programming&rdquo; category and a user creates a category named &ldquo;programming&rdquo; again. We
don&rsquo;t want different pages to have identical URLs. The solution is to append a suffix to
&ldquo;programming&rdquo; and make sure that suffix is never the same. This example might seem contrived, but if you are
generating the slug based on, say, the title of a post instead of the name of a category, then it is realistic to think
more than one user might have thought of the same post title. Another way around this is to validate the uniqueness of the
sluggable column in the model, but appending a suffix like this allows for flexibility in design and adds a layer
of protection against duplicate URLs.</p>

<p>Continuing with our example, since there is already an instance of Category with &ldquo;programming&rdquo; in the slug column, this time <code>object</code> will not be
equal to <code>nil</code> at this point in the method:</p>

<pre><code class="ruby">object = self.class.find_by(slug: the_slug)
</code></pre>

<p>so the first condition of the while loop will be met. The second condition is that <code>object</code> not
be equal to <code>self</code>. That condition is necessary in case <code>self</code> is only being updated. If <code>self</code> is being updated,
<code>object</code> will equal <code>self</code> and we don&rsquo;t want to append anything to the URL. In the case where <code>self</code> is being created <code>object</code>
will instead be equal to the previous instance of Category with &ldquo;programming&rdquo; in the slug column
so both conditions of the while loop will be true. In the line below <code>the_slug</code> is being set to &ldquo;programming-2&rdquo;.
Let&rsquo;s look at how the <code>append_suffix</code> method works.</p>

<pre><code class="ruby">the_slug = append_suffix(the_slug, count)
</code></pre>

<p>The first line of the <code>append_suffix</code> method is:</p>

<pre><code class="ruby">if the_slug.split('-').last.to_i != 0
</code></pre>

<p>This is saying, since the <code>parameterize</code> method used inside the <code>to_slug</code> method generates
a string that replaces spaces with dashes, <code>the_slug</code> should either be a one word string,
or it should be a string of any number of words separated by dashes instead of spaces.
Therefore, call split on that string to get an array formatted like this:</p>

<pre><code class="bash">the_slug = "a-url-safe-string"
the_slug.split('-')
=&gt; ["a", "url", "safe", "string"]
</code></pre>

<p>then it takes the last element in that array and calls <code>to_i</code> on it. Calling <code>to_i</code> on
a string of letters returns 0, and calling <code>to_i</code> on a string that only contains a Fixnum or a Float
returns the appropriate integer.</p>

<pre><code class="ruby">def append_suffix(the_slug, count)
  if the_slug.split('-').last.to_i != 0
    return the_slug.split('-').slice(0...-1).join('-') + "-" + count.to_s
  else
    return the_slug + "-" + count.to_s
  end
end
</code></pre>

<p>Therefore, this is saying if the last element in the array is a number, then take all the elements
but the last one in that array and put them into a string, separating them with a
dash. Then add a dash to the end of the string and then add the integer <code>count</code> equals to the end
of the string such that if <code>the_slug</code> was <code>"programming-2"</code> it would become <code>"programming-3"</code>
Otherwise, the last element in the array is not a number, so just add a dash to the end of <code>the_slug</code> and
then add the integer <code>count</code> equals to the end of <code>the_slug</code> such that if <code>the_slug</code> was <code>"programming"</code>
it would become <code>"programming-2"</code>.</p>

<p>Now, back to the next line of the while loop inside the <code>generate_slug</code> method:</p>

<pre><code class="ruby">object = self.class.find_by(slug: the_slug)
</code></pre>

<p>This is resetting <code>object</code>. If there is an instance of Category saved in the database
with a slug value equal to <code>the_slug</code> then <code>object</code> will be truthy so the loop will continue.</p>

<pre><code class="ruby">def generate_slug
...
  while object &amp;&amp; object != self
    the_slug = append_suffix(the_slug, count)
    object = self.class.find_by(slug: the_slug)
    count += 1
  end
  self.slug = the_slug
end
</code></pre>

<p>The next time around <code>count</code> will be one number greater which means <code>the_slug</code>
will have a different number appended to it which means <code>object</code> will be
set to something different. This loop will continue until <code>object</code> is falsy which means <code>the_slug</code> is
finally a unique string.</p>

<p>Finally, the last line of the <code>generate_slug</code> method sets the slug column of <code>self</code>
to the string <code>the_slug</code> was set to. (<code>self</code> is the object <code>generate_slug</code> is being called on.
The example I&rsquo;ve used throughout this post has been <code>@category.generate_slug</code>)
When <code>@category</code> is saved in the create action, <code>@category.slug</code> will equal something like &ldquo;programming-2&rdquo;.
Now wherever you look up a resource that has been slugified you have to change this format:</p>

<pre><code class="ruby">@category = Category.find(params[:id])
</code></pre>

<p>to this:</p>

<pre><code class="ruby">@category = Category.find_by(slug: params[:id])
</code></pre>

<p>because <code>find</code> will look for a primary key, but <code>params[:id]</code> returns a slug now
since the <code>to_param</code> method is overridden to return the slug instead of the primary key.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self Referential Associations in Rails]]></title>
    <link href="http://durrellchamorro.github.io/blog/2015/10/05/self-referential-associations-in-rails/"/>
    <updated>2015-10-05T12:25:45-07:00</updated>
    <id>http://durrellchamorro.github.io/blog/2015/10/05/self-referential-associations-in-rails</id>
    <content type="html"><![CDATA[<p>In this post I&rsquo;ll compare and contrast different database associations in rails with the goal of
explaining how to set up self referential associations in rails. My conclusion is the conventions
rails provides don&rsquo;t always make code easier to read.<!--more--></p>

<p>Rails makes it easy to associate different models with one another. Take these
two models as a straight forward example:</p>

<pre><code class="ruby">class God &lt; ActiveRecord::Base
  belongs_to :human
end
</code></pre>

<pre><code class="ruby">class Human &lt; ActiveRecord::Base
  self.table_name =“humans”
  has_many :gods
end
</code></pre>

<p>In this model <code>self.table_name = “humans”</code> tells rails to look for a table
named <code>humans</code> instead of <code>humen</code> which it will automatically look for
with a model named <code>Human</code>. This can be demonstrated by typing the following
command into the rails console:</p>

<pre><code class="bash">“human”.tableize =&gt; “humen”
</code></pre>

<p>So long as you have a foreign key called <code>human_id</code> in the gods table, rails
will figure out the association and let you call things like</p>

<pre><code class="bash">zeus.human =&gt; #&lt;Human id: 1, name: “bob"&gt;
</code></pre>

<pre><code class="bash">bob.gods =&gt; #&lt;ActiveRecord::Associations::CollectionProxy [#&lt;God id: 1, name: "Zeus", human_id: 1&gt;, #&lt;God id: 2, name: "Athena", human_id: 1&gt;]&gt;
</code></pre>

<p>The <code>has_many :gods</code> line in the Human model is just a rails convention for the following method:</p>

<pre><code class="ruby">  def gods
    God.where(human_id: self.id)
  end
</code></pre>

<p>As you can see from the above method, rails assumes you are querying the gods table and it assumes you are looking for the foreign key in the gods table that equals the primary key of the object the <code>gods</code> method is being called on.</p>

<p>Likewise, the <code>belongs_to :human</code> line in the God model is a rails convention for the following method:</p>

<pre><code class="ruby">  def human
    Human.find(self.human_id)
  end
</code></pre>

<p>As you can see from the method above, rails assumes you are querying the humans table for the primary key that equals the foreign key (in this case the foreign key is human_id) of the object (in the example above the object was zeus) the <code>human</code> method is being called on. It automatically looks for a foreign key called <code>human_id</code> by convention as well since the relationship is <code>belongs to :human</code></p>

<p>The rails conventions work beautifully for the above situation, but if you wanted to show a god has many human followers and a human follows many different gods? The <code>belongs_to :human</code> line above doesn’t allow you to call <code>zeus.humans</code> to get a list of humans. It only allows  you to call <code>zeus.human</code> to get one human. To fix this we need to set up a many to many relationship.</p>

<p>First we’ll create a new table called <code>relationships</code>. The model that hooks up to that table will look like this:</p>

<pre><code class="ruby">class Relationship &lt; ActiveRecord::Base
  belongs_to :god
  belongs_to :human
end
</code></pre>

<p>The relationships table will have foreign keys called <code>god_id</code> and <code>human_id</code>. The God model will need to be changed to this:</p>

<pre><code class="ruby">class God &lt; ActiveRecord::Base
  has_many :relationships
  has_many :humans, through: :relationships
end
</code></pre>

<p>If the relationships table has a row with god_id equal to 1 and human_id equal to 1 and another row with god_id equal
to 1 and human_id equal to 2 and we do this:</p>

<pre><code class="bash">zeus = God.first
</code></pre>

<p>then we get this:</p>

<pre><code class="bash">zeus.humans =&gt; #&lt;ActiveRecord::Associations::CollectionProxy [#&lt;Human id: 2, name: "marcus"&gt;, #&lt;Human id: 1, name: "maximus"&gt;]&gt;
</code></pre>

<p>the rails convention <code>has_many :humans, through: :relationships</code> is the same as writing this method. The difference
is the convention returns an ActiveRecord_Associations_CollectionProxy and the
method below returns an array. This is a minor difference because you just need
to call <code>to_a</code> on it to turn it into an array.</p>

<pre><code class="ruby">def humans
  Human.find(Relationship.where(god_id: self.id).pluck(:human_id))
end
</code></pre>

<p>As you can see from the method, this convention assumes you are querying the
relationships table for all entries where the god_id foreign key is equal to the
primary key of the object the <code>humans</code> method is being called on.  It then
assumes you want a list of all the humans
whose primary key equals the human_id foreign key in the list of relationships
it got from the previous query.</p>

<p>If the relationships table has a row with god_id equal to 1 and human_id equal
to 1 and another row with god_id equal to 2 and human_id equal to 1, and we do this:</p>

<pre><code class="bash">max = Human.first
</code></pre>

<p>then we get this:</p>

<pre><code class="bash">max.gods  =&gt; #&lt;ActiveRecord::Associations::CollectionProxy [#&lt;God id: 1, name: "Zeus", human_id: 1&gt;, #&lt;God id: 2, name: "Athena", human_id: 1&gt;]&gt;
</code></pre>

<p>The rails convention</p>

<pre><code class="ruby">has_many: gods, through: :relationships
</code></pre>

<p>is the same as writing the method below. The difference is the convention returns
an ActiveRecord_Associations_CollectionProxy and the method below returns an
array. This is a minor difference because you just need to call <code>to_a</code> on
it to turn it into an array.</p>

<pre><code class="ruby"> def gods
   God.find(Relationship.where(human_id: self.id).pluck(:god_id))
 end
</code></pre>

<p>As you can see from the method, this convention assumes you are querying the relationships table for all entries where the human_id foreign key is equal to the primary key of the object the <code>gods</code> method is being called on.  It then assumes you want a list of all the gods
whose primary key equals the god_id foreign key in the list of relationships it
got from the previous query.</p>

<p>What if you want a list of all the children and all the parents of a particular god? This sort of request is a self referential association. Instead of asking for associated data in another table as in humans associated with gods, you are asking for associated data within the same table as in gods associated with gods. This means the conventions above wont work because the assumptions explained above that rails makes will be wrong. Therefore, you have to explicitly tell rails where to look.</p>

<p>The Relationship model will need two additional lines as follows:</p>

<pre><code class="ruby">class Relationship &lt; ActiveRecord::Base
  belongs_to :god
  belongs_to :human
  belongs_to :parent, class_name: "God"
  belongs_to :child, class_name: "God"
end
</code></pre>

<p>Here we are naming the relationship as <code>parent</code> and <code>child</code> but we don’t
want rails to look for the <code>Parent</code> class/model and the <code>Child</code> class/model because
those classes/models don’t exist. Therefore we have to explicitly tell rails to look
for the God class/model.</p>

<p>The God class will need these two additional lines of code:</p>

<pre><code class="ruby">has_many :children, class_name: "Relationship", foreign_key: :parent_id
has_many :parents, class_name: "Relationship", foreign_key: :child_id
</code></pre>

<p>We need to explicitly tell rails the class name is Relationship otherwise it will
look for the Child and Parent classes. Then we need to tell rails the foreign
key names we want. In this case we are looking for the parent_id foreign keys
in the <code>relationships</code> table and we want to access that data by calling a method named <code>children</code>. We are also looking for the child_id foreign keys in the relationships table and we want to access that data by calling a method named <code>parents</code></p>

<p>There is still a little convention at play. We are naming the methods
<code>children</code> and <code>parents</code> since the Relationship model has <code>belongs_to :parent, class_name: "God"</code>
and <code>belongs_to :child, class_name: “God”</code> which tell rails to associate the two classes.</p>

<p>This line</p>

<pre><code class="ruby">has_many :children, class_name: "Relationship", foreign_key: :parent_id
</code></pre>

<p>is essentially the same as writing this method below with the exception that the method
below returns a Relationship::ActiveRecord_Relation and the convention above returns
an ActiveRecord_Associations_CollectionProxy, both of which can be turned
into an array by calling <code>to_a</code> on them.</p>

<pre><code class="ruby">def children
  Relationship.where(parent_id: self.id)
end
</code></pre>

<p>With all this being said, I think this example shows the conventions in rails don&rsquo;t
always make the code easier to read. To me, it&rsquo;s easier to understand what is going on
in the method above than in the convention below.</p>

<pre><code>has_many :children, class_name: "Relationship", foreign_key: :parent_id
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Be Aware of App not Being Aware of Database Data]]></title>
    <link href="http://durrellchamorro.github.io/blog/2015/08/17/be-aware-of-app-not-being-aware-of-database-data/"/>
    <updated>2015-08-17T14:40:25-07:00</updated>
    <id>http://durrellchamorro.github.io/blog/2015/08/17/be-aware-of-app-not-being-aware-of-database-data</id>
    <content type="html"><![CDATA[<p>When you write a database backed app, you need to be aware that the app isn&rsquo;t always aware
of new data that recently hit the database. For example,<!--more--> say you have a
method like this that deals one card to a player or dealer:</p>

<pre><code class="ruby">def deal_one_card(role, hand)
   card = Card.deal_one
   if role.class == Player
     card.player_id = current_player.id
     card.hand_id = hand.id
   else
     card.dealer_id = dealer.id
     card.hand_id = hand.id
   end
   card.save
 end
</code></pre>

<p>and you have a loop like this that will continue adding cards to the dealers hand until
the total of the dealer&rsquo;s hand sums to at least 17</p>

<pre><code class="ruby">while total(dealer.hand.cards) &lt; ApplicationController::DEALER_MINIMUM
  deal_one_card(dealer, dealer.hand)
end
</code></pre>

<p>As the <code>deal_one_card</code> method above is written the card will be saved in the
database with the proper attributes linking it to the dealer&rsquo;s hand,
however the rails app will not be aware of this change in the database while inside the loop
so when it totals the dealer&rsquo;s cards, the total will never increase. Therefore if the total was &lt; 17
entering the loop, it will stay &lt; 17 and the loop will go on infinitely.</p>

<p>In order to let the app know how the <code>deal_one_card</code> method changed the database
you must reload the hand like so:</p>

<pre><code class="ruby">while total(dealer.hand.reload.cards) &lt; ApplicationController::DEALER_MINIMUM
  deal_one_card(dealer, dealer.hand)
end
</code></pre>

<p>This was a nasty bug I had the toughest time figuring out and I&rsquo;m very thankful to Brandon
at <a href="https://launchschool.com">Launch School</a> for figuring this one out and explaining it to me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Magic With Partials]]></title>
    <link href="http://durrellchamorro.github.io/blog/2015/07/03/rails-magic-with-partials/"/>
    <updated>2015-07-03T06:33:02-07:00</updated>
    <id>http://durrellchamorro.github.io/blog/2015/07/03/rails-magic-with-partials</id>
    <content type="html"><![CDATA[<p>When you want to send a collection of objects to a partial you can use Rails
conventions to eliminate code if you know what rails automatically assumes.</p>

<!--more-->


<p>Normally, for a partial containing the code in Example 2 you would
write something like this in the view:</p>

<p>Example 1
<code>ruby
&lt;%= render "shared/title", title: "All Posts" %&gt;
</code>
where <code>”shared/title"</code> is the relative path to the partial and <code>title:</code>
is the name of the local variable in the partial, and <code>”All Posts”</code> is the
string that local variable will be set to. It is important to remember the actual
partial needs to have an underscore in front of it so the actual file in this
example is <code>_title.html.erb</code> but it is just referenced as <code>title</code> as
shown above.</p>

<p>Example 2
<code>ruby
  &lt;h3&gt;&lt;%= title %&gt;&lt;/h3&gt;
</code>
Here is where you can take advantage of Rails conventions and assumptions. Let’s
say you have an object <code>@posts</code> that is set in your Controller to your Post
model like this: <code>@posts = Post.all</code> so <code>@posts</code> contains many post
objects, and each post has its own categories. Instead of writing all this:</p>

<p>Example 3
<code>ruby
&lt;% @posts.each do |post| %&gt;
  &lt;% post.categories.each do |category| %&gt;
    &lt;%= render '/categories/category', category: category %&gt;
  &lt;% end %&gt;
&lt;% end %&gt;
</code></p>

<p>You can simply write:</p>

<p>Example 4
<code>ruby
&lt;% @posts.each do  |post| %&gt;
  &lt;%= render post.categories %&gt;
&lt;% end %&gt;
</code>
The partial for Example 4 might look something like this:</p>

<p>Example 5
<code>ruby
&lt;%= link_to category.name, post_path(category) %&gt;
</code>
In Example 4 the resources we are rendering are categories. Rails will assume
there is a folder named after those resources that contains a partial named
after the singular of those resources. Given that knowledge, all we have to do
is create a <code>categories</code> folder relative to the view and put a
<code>category.html.erb</code> file in it that contains the code in Example 5.</p>
]]></content>
  </entry>
  
</feed>
