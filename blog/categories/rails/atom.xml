<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | My Octopress Blog]]></title>
  <link href="http://durrellchamorro.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://durrellchamorro.github.io/"/>
  <updated>2015-10-05T17:57:48-07:00</updated>
  <id>http://durrellchamorro.github.io/</id>
  <author>
    <name><![CDATA[Durrell Chamorro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Be Aware of App Not Being Aware of Database Data]]></title>
    <link href="http://durrellchamorro.github.io/blog/2015/08/17/be-aware-of-app-not-being-aware-of-database-data/"/>
    <updated>2015-08-17T14:40:25-07:00</updated>
    <id>http://durrellchamorro.github.io/blog/2015/08/17/be-aware-of-app-not-being-aware-of-database-data</id>
    <content type="html"><![CDATA[<p>When you write a database backed app, you need to be aware that the app isn&rsquo;t always aware
of new data that recently hit the database. For example,<!--more--> say you have a
method like this that deals one card to a player or dealer:</p>

<pre><code class="ruby">def deal_one_card(role, hand)
   card = Card.deal_one
   if role.class == Player
     card.player_id = current_player.id
     card.hand_id = hand.id
   else
     card.dealer_id = dealer.id
     card.hand_id = hand.id
   end
   card.save
 end
</code></pre>

<p>and you have a loop like this that will continue adding cards to the dealers hand until
the total of the dealer&rsquo;s hand sums to at least 17</p>

<pre><code class="ruby">while total(dealer.hand.cards) &lt; ApplicationController::DEALER_MINIMUM
  deal_one_card(dealer, dealer.hand)
end
</code></pre>

<p>As the <code>deal_one_card</code> method above is written the card will be saved in the
database with the proper attributes linking it to the dealer&rsquo;s hand,
however the rails app will not be aware of this change in the database while inside the loop
so when it totals the dealer&rsquo;s cards, the total will never increase. Therefore if the total was &lt; 17
entering the loop, it will stay &lt; 17 and the loop will go on infinitely.</p>

<p>In order to let the app know how the <code>deal_one_card</code> method changed the database
you must reload the hand like so:</p>

<pre><code class="ruby">while total(dealer.hand.reload.cards) &lt; ApplicationController::DEALER_MINIMUM
  deal_one_card(dealer, dealer.hand)
end
</code></pre>

<p>This was a nasty bug I had the toughest time figuring out and I&rsquo;m very thankful to Brandon
at <a href="http://gotealeaf.com/">Tealeaf Academy</a> for figuring this one out and explaining it to me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Magic With Partials]]></title>
    <link href="http://durrellchamorro.github.io/blog/2015/07/03/rails-magic-with-partials/"/>
    <updated>2015-07-03T06:33:02-07:00</updated>
    <id>http://durrellchamorro.github.io/blog/2015/07/03/rails-magic-with-partials</id>
    <content type="html"><![CDATA[<p>When you want to send a collection of objects to a partial you can use Rails
conventions to eliminate code if you know what rails automatically assumes.</p>

<!--more-->


<p>Normally, for a partial containing the code in Example 2 you would
write something like this in the view:</p>

<p>Example 1
<code>ruby
&lt;%= render "shared/title", title: "All Posts" %&gt;
</code>
where <code>”shared/title"</code> is the relative path to the partial and <code>title:</code>
is the name of the local variable in the partial, and <code>”All Posts”</code> is the
string that local variable will be set to. It is important to remember the actual
partial needs to have an underscore in front of it so the actual file in this
example is <code>_title.html.erb</code> but it is just referenced as <code>title</code> as
shown above.</p>

<p>Example 2
<code>ruby
  &lt;h3&gt;&lt;%= title %&gt;&lt;/h3&gt;
</code>
Here is where you can take advantage of Rails conventions and assumptions. Let’s
say you have an object <code>@posts</code> that is set in your Controller to your Post
model like this: <code>@posts = Post.all</code> so <code>@posts</code> contains many post
objects, and each post has its own categories. Instead of writing all this:</p>

<p>Example 3
<code>ruby
&lt;% @posts.each do |post| %&gt;
  &lt;% post.categories.each do |category| %&gt;
    &lt;%= render '/categories/category', category: category %&gt;
  &lt;% end %&gt;
&lt;% end %&gt;
</code></p>

<p>You can simply write:</p>

<p>Example 4
<code>ruby
&lt;% @posts.each do  |post| %&gt;
  &lt;%= render post.categories %&gt;
&lt;% end %&gt;
</code>
The partial for Example 4 might look something like this:</p>

<p>Example 5
<code>ruby
&lt;%= link_to category.name, post_path(category) %&gt;
</code>
In Example 4 the resources we are rendering are categories. Rails will assume
there is a folder named after those resources that contains a partial named
after the singular of those resources. Given that knowledge, all we have to do
is create a <code>categories</code> folder relative to the view and put a
<code>category.html.erb</code> file in it that contains the code in Example 5.</p>
]]></content>
  </entry>
  
</feed>
